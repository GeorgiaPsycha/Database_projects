CREATE TABLE Public."Keywords_temp" AS
SELECT DISTINCT id, keywords
FROM public."Keywords";

DROP TABLE public."Keywords";

ALTER TABLE public."Keywords_temp" RENAME TO Keywords;

ALTER TABLE public."Keywords"
ADD PRIMARY KEY (id);

ALTER TABLE public."Links"
ADD PRIMARY KEY (movieid);

CREATE TABLE Public."Movies_Metadata_temp" AS(select distinct on (id) id,adult,belongs_to_collection,budget,genres,homepage,imdb_id,original_language,original_title,overview,popularity,poster_path,production_companies,production_countries,release_date,revenue,runtime,spoken_languages,status,tagline,title,video,vote_average,vote_count from Movies_Metadata);
DROP table Movies_Metadata;
ALTER TABLE Public."Movies_Metadata_temp" RENAME TO Movies_Metadata;
ALTER TABLE public."Movies_Metadata"
ADD PRIMARY KEY (id);

CREATE TABLE Public."Credits_temp" AS
SELECT DISTINCT actors, id, crew
FROM public."Credits";

DROP TABLE public."Credits";

ALTER TABLE public."Credits_temp" RENAME TO Credits;

------------------------------------------------------------------

--duplicate removals for tables Credits, Keywords and Links
delete from Credits where crew in (select crew from (select crew, ROW_NUMBER() over (partition by id order by crew) as row_num from Credits) t where t.row_num > 1);

delete from Keywords where keywords in (select keywords from (select keywords, ROW_NUMBER() over (partition by id order by keywords) as row_num from Keywords) t where t.row_num > 1);

delete from Links where movieId in (select movieId from (select movieId, ROW_NUMBER() over (partition by tmdbId order by movieId) as row_num from Links) t where t.row_num > 1);

--the statements for removal of movies that are not in table Movies_Metadata.
delete from Links where tmdbId in (select tmdbId from Links where tmdbId not in (select id from Movies_Metadata));

delete from Links where imdbId not in (select imdb_id from Movies_Metadata join Links on imdb_id = imdbId);

delete from Ratings where movieId in (select movieId from Ratings where movieId not in (select movieId from Links));
